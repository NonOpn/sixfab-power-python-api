Help on module power_api.power_api in power_api:

NAME
    power_api.power_api

CLASSES
    builtins.object
        SixfabPower
    
    class SixfabPower(builtins.object)
     |  Sixfab Power Class.
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ask_watchdog_alarm(self, timeout=10)
     |      Function for asking watchdog alarm is exist
     |          
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for EXIST, "2" for NOT_EXIST
     |  
     |  clear_program_storage(self, timeout=500)
     |      Function for clearing firmware storage
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SUCCESS, "2" for FAIL
     |  
     |  create_scheduled_event(self, event_id, schedule_type, repeat, time_or_interval, interval_type, repeat_period, action, timeout=200)
     |      Function for creating scheduling event
     |      
     |      Parameters
     |      -----------
     |      event_id : int 
     |          id to describe events indivudially
     |      
     |      schedule_type : Definition Object Property
     |          --> Definition.NO_EVENT
     |          --> Definition.EVENT_TIME
     |          --> Definition.EVENT_INTERVAL
     |      
     |      repeat : Definition Object Property
     |          --> Definition.EVENT_ONE_SHOT
     |          --> Definition.EVENT_REPEATED
     |      
     |      time_or_interval : int
     |          daily_epoch_time in seconds or interval (Checkout *Notes for daily_exact_time)
     |      
     |      interval_type : Definition Object Property 
     |          --> Definition.INTERVAL_TYPE_SEC
     |          --> Definition.INTERVAL_TYPE_MIN
     |          --> Definition.INTERVAL_TYPE_HOUR 
     |      
     |      repeat_period : int
     |          day_factor (Checkout *Notes)
     |      
     |      action : int
     |          --> "1" for START
     |          --> "2" for HARD SHUTDOWN
     |          --> "3" for SOFT SHUTDOWN
     |          --> "4" for HARD REBOOT
     |          --> "5" for SOFT REBOOT
     |      
     |       timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Notes
     |      -----
     |      1) Calculation of daily_exact_time :
     |      daily exact_time formula: epoch_time_local % (24*60*60)
     |      
     |      daily exact time example: 
     |      --> Friday, March 27, 2020 11:19:00 PM GMT+03:00
     |      --> epoch_local = 1585340340 (In this case local : GMT+3)
     |      --> daily exact_time = 1585340340 % 86400 = 73140
     |      
     |      2) Calculation of day_factor                                                             
     |      [monday] --> Bit 0
     |      [tuesday] --> Bit 1
     |      [wednesday] --> Bit 2
     |      [thursday] --> Bit 3
     |      [friday] --> Bit 4
     |      [saturday] --> Bit 5
     |      [sunday] --> Bit 6
     |      [RESERVED] --> Bit 7 (Default 0)
     |                                                   
     |      Example Calculation for every day : 
     |      day_factor = 0b01111111 = 127
     |      
     |      Example Calculation for (sunday + monday + tuesday) :
     |      day_factor = 0b01000011 = 67
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  create_scheduled_event_with_event(self, event, timeout=200)
     |      Function for creating scheduling event
     |      
     |      Parameters
     |      -----------
     |      event : Event Class Object
     |          instance of Event class
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  get_battery_current(self, timeout=10)
     |      Function for getting battery current
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      current : float
     |          battery current [Ampere]
     |  
     |  get_battery_design_capacity(self, timeout=10)
     |      Function for getting battery design capacity
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      capacity : int
     |          battery design capacity in [mAh]
     |  
     |  get_battery_health(self, timeout=10)
     |      Function for getting battery health
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      health : int
     |          battery health as percentage [%]
     |  
     |  get_battery_level(self, timeout=10)
     |      Function for getting battery level
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      level : int
     |          battery charge of state as percentage [%]
     |  
     |  get_battery_max_charge_level(self, timeout=10)
     |      Function for getting battery max charge level
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      level : int
     |          battery max charge level in percentage [%]
     |  
     |  get_battery_power(self, timeout=10)
     |      Function for getting battery power
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      power : float
     |          battery power [Watt]
     |  
     |  get_battery_temp(self, timeout=10)
     |      Function for getting battery temperature
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      temperature : float
     |          battery temperature [Celcius]
     |  
     |  get_battery_voltage(self, timeout=10)
     |      Function for getting battery voltage
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      voltage : float 
     |          battery voltage [Volt]
     |  
     |  get_button1_status(self, timeout=10)
     |      Function for getting button 1
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      status : int
     |          "1" for SHORT_PRESS, "2" for LONG_PRESS, "3" for RELEASED
     |  
     |  get_button2_status(self, timeout=10)
     |      Function for getting button 2
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      status : int
     |          "1" for SHORT_PRESS, "2" for LONG_PRESS, "3" for RELEASED
     |  
     |  get_fan_automation(self, timeout=10)
     |      Function for getting fan automation
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      automation : byteArray(2) 
     |          [slow_threshold, fast_threshold] [Celcius]
     |  
     |  get_fan_health(self, timeout=10)
     |      Function for getting fan health
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      health : int
     |          "1" for HEALTHY, "2" for BROKEN
     |  
     |  get_fan_speed(self, timeout=10)
     |      Function for getting fan speed
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      speed : int
     |          fan speed [RPM]
     |  
     |  get_firmware_ver(self, timeout=10)
     |      Function for getting firmware version on mcu
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      version : char[8] 
     |          ver [Ex. v1.00.00]
     |  
     |  get_input_current(self, timeout=10)
     |      Function for getting input current
     |      
     |      Parameters
     |      -----------                     
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      current : float 
     |          input current [Ampere]
     |  
     |  get_input_power(self, timeout=50)
     |      Function for getting input power
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      power : float
     |          input power [Watt]
     |  
     |  get_input_temp(self, timeout=10)
     |      Function for getting input temperature
     |      
     |      Parameters
     |      -----------             
     |      timeout : int (optional)
     |      timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      temperature : float 
     |      PCB temperature of Sixfab Power Management and UPS HAT [Celcius]
     |  
     |  get_input_voltage(self, timeout=10)
     |      Function for getting input voltage
     |      
     |      Parameters
     |      -----------     
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      voltage : float 
     |          input voltage [Volt]
     |  
     |  get_rgb_animation(self, timeout=10)
     |      Function for getting RGB animation
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      animation : byteArray(3)
     |          [anim_type, color, speed]
     |      
     |      Notes
     |      -----
     |      anim_type : Definition Object Property
     |          --> Definition.RGB_DISABLED
     |          --> Definition.RGB_HEARTBEAT
     |          --> Definition.RGB_TEMP_MAP
     |      
     |      color : Definition Object Property
     |          --> Definition.RED
     |          --> Definition.GREEN
     |          --> Definition.BLUE
     |          --> Definition.YELLOW
     |          --> Definition.CYAN
     |          --> Definition.MAGENTA
     |          --> Definition.WHITE
     |          --> Definition.BLACK
     |      
     |      speed : Definition Object Property
     |          --> Definition.SLOW
     |          --> Definition.NORMAL
     |          --> Definition.FAST
     |  
     |  get_rtc_time(self, format=0, timeout=10)
     |      Function for getting time of RTC in MCU
     |      
     |      Parameters
     |      -----------
     |      format : Definition Object Property
     |          --> Definition.TIME_FORMAT_EPOCH
     |          --> Definition.TIME_FORMAT_DATE_AND_TIME
     |          --> Definition.TIME_FORMAT_DATE
     |          --> Definition.TIME_FORMAT_TIME
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      timestamp : int/str
     |          time in chosen format
     |  
     |  get_safe_shutdown_battery_level(self, timeout=10)
     |      Function for setting safe shutdown battery level
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      level : int
     |          safe shutdown level in percentage [%]
     |  
     |  get_safe_shutdown_battery_status(self, timeout=10)
     |      Function for setting safe shutdown status
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      status : int
     |          "1" for ENABLEDi "2" for DISABLED
     |  
     |  get_scheduled_event_ids(self, timeout=50)
     |      Function for getting scheduled event ids
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      ids : byteArray(10)
     |          active ids of scheduled events
     |  
     |  get_system_current(self, timeout=50)
     |      Function for getting system current
     |      
     |      Parameters
     |      -----------     
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      current : float
     |          current that supplies raspberry pi and other peripherals [Ampere]
     |  
     |  get_system_power(self, timeout=50)
     |      Function for getting system power
     |      
     |      Parameters
     |      -----------     
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      power : float
     |          power that supplies raspberry pi and other peripherals [Ampere]
     |  
     |  get_system_temp(self)
     |      Function for getting raspberry pi core temperature
     |      
     |      Parameters
     |      -----------     
     |      None
     |      
     |      Returns
     |      ------- 
     |      temperature : float
     |          raspberry pi core temperature [Celcius]
     |  
     |  get_system_voltage(self, timeout=10)
     |      Function for getting system voltage
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      voltage : float
     |          voltage source that supplies raspberry pi and other peripherals [Volt]
     |  
     |  get_watchdog_status(self, timeout=10)
     |      Function for getting watchdog status
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      status : int
     |          "1" for WATCHDOG ENABLED, "2" for WATCHDOG DISABLED
     |  
     |  get_working_mode(self, timeout=10)
     |      Function for getting working mode
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      working_mode : int
     |          "1" for CHARGING, "2" for FULLY_CHARGED, "3" for BATTERY POWERED
     |  
     |  hard_power_off(self, timeout=10)
     |      Function for raspberry pi hard powering off
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  hard_reboot(self, timeout=100)
     |      Function for hard rebooting
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" SET_OK, "2" for SET_FAILED
     |  
     |  remove_all_scheduled_events(self, timeout=200)
     |      Function for removing all scheduling events
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  remove_scheduled_event(self, event_id, timeout=200)
     |      Function for removing scheduling event with event id
     |      
     |      Parameters
     |      -----------
     |      event_id : int
     |          event id that is required to remove
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  reset_for_boot_update(self)
     |      Function for resetting MCU and go to boot mode
     |      
     |      Parameters
     |      -----------
     |      None
     |      
     |      Returns
     |      ------- 
     |      None
     |  
     |  reset_mcu(self)
     |      Function for resetting MCU
     |      
     |      Parameters
     |      -----------
     |      None
     |      
     |      Returns
     |      ------- 
     |      None
     |  
     |  send_system_temp(self, timeout=10)
     |      Function for sending raspberry pi core temperature to mcu
     |      
     |      Parameters
     |      -----------     
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SUCCESS, "2" for FAIL
     |  
     |  set_battery_design_capacity(self, capacity, timeout=10)
     |      Function for setting battery design capacity
     |      
     |      Parameters
     |      -----------
     |      capacity : int
     |          battery design capacity in [mAh]
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  set_battery_max_charge_level(self, level, timeout=10)
     |      Function for setting battery max charge level
     |      
     |      Parameters
     |      -----------
     |      level : int
     |          battery is charged up to this level in percentage [%]
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_fan_automation(self, slow_threshold, fast_threshold=100, timeout=10)
     |      Function for setting fan automation
     |      
     |      Parameters
     |      -----------
     |      slow_threshold : int
     |          temperature threshold to decide fan working status
     |      fast_threshold : int (optional)
     |          temperature threshold to decide fan working status (default is 100)
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_fan_speed(self, status, timeout=10)
     |      Function for setting fan speed
     |      
     |      Parameters
     |      -----------
     |      status : "1" for START FAN, "2" for STOP FAN
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_rgb_animation(self, anim_type, color, speed, timeout=10)
     |      Function for setting RGB animation
     |      
     |      Parameters
     |      -----------
     |      anim_type : [DISABLED, HEARTBEAT, TEMP_MAP]
     |      color : [GREEN, BLUE, RED, YELLOW, CYAN, MAGENTA, WHITE]
     |      speed : [SLOW, NORMAL, FAST] 
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_rtc_time(self, timestamp, timeout=10)
     |      Function for setting time of RTC in MCU
     |      
     |      Parameters
     |      -----------
     |      time : int
     |          epoch time
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET_OK, "2" for SET_FAILED
     |  
     |  set_safe_shutdown_battery_level(self, level, timeout=10)
     |      Function for setting safe shutdown battery level
     |      
     |      Parameters
     |      -----------
     |      level : int
     |          raspberry pi is turned off if battery falls to this level
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_safe_shutdown_battery_status(self, status, timeout=10)
     |      Function for setting safe shutdown status
     |      
     |      Parameters
     |      -----------
     |      status : int
     |          "1" for ENABLED, "2" for DISABLED
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  set_watchdog_status(self, status, timeout=10)
     |      Function for setting watchdog status
     |      
     |      Parameters
     |      -----------
     |      status : "1" for WATCHDOG ENABLED, "2" for WATCHDOG DISABLED
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SET OK, "2" for SET FAILED
     |  
     |  soft_power_off(self, timeout=10)
     |      Function for checking any soft power off request is exist. If any
     |      request exist, raspberry pi turns off by using "sudo shutdown" terminal
     |      command in 5 seconds.
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for EXIST, "2" for NOT_EXIST
     |  
     |  soft_reboot(self, timeout=10)
     |      Function for checking any soft reboot request is exist. If any
     |      request exist, raspberry pi reboots by using "sudo reboot" terminal
     |      command in 5 seconds.
     |      
     |      Parameters
     |      -----------
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for EXIST, "2" for NOT_EXIST
     |  
     |  update_firmware(self, firmware_file, update_method=0, timeout=25)
     |      Function for updating mcu firmware. Do not make any other api call while update call is running.
     |      
     |      Parameters
     |      -----------
     |      firmware_file : str
     |          .bin file path
     |      update_method : int (optional)
     |          "0" for boot_mode_update, "1" for firmware_mode_update (default is 0)
     |      timeout : int (optional)
     |          timeout while receiving the response (default is RESPONSE_DELAY)
     |      
     |      Yields
     |      ------
     |      process : int
     |          Process [%] on every step
     |      
     |      Returns
     |      ------- 
     |      result : int
     |          "1" for SUCCESS, "2" for FAIL
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  board = 'Sixfab Raspberry Pi UPS HAT'

FUNCTIONS
    debug_print(message)
        Function for printing debug message.
    
    delay_ms(ms)
        Function for delay as miliseconds.
    
    millis()
        Function for getting time as miliseconds.

DATA
    COMMAND_SIZE_FOR_DOUBLE = 13
    COMMAND_SIZE_FOR_FLOAT = 11
    COMMAND_SIZE_FOR_INT16 = 9
    COMMAND_SIZE_FOR_INT32 = 11
    COMMAND_SIZE_FOR_INT64 = 15
    COMMAND_SIZE_FOR_UINT8 = 8
    COMMAND_TYPE_REQUEST = 1
    COMMAND_TYPE_RESPONSE = 2
    DEVICE_ADDRESS = 65
    PROTOCOL_FRAME_SIZE = 7
    PROTOCOL_HEADER_SIZE = 5
    RESPONSE_DELAY = 10
    START_BYTE_RECIEVED = 220
    START_BYTE_SENT = 205
    buffer_receive = []
    buffer_recieve_index = 0
    buffer_send = []
    command = <power_api.command.Command object>

FILE
    /home/pi/sixfab_dev/sixfab-power-python-api/power_api/power_api.py


